{
  "uid" : "e16bef835cd36441",
  "name" : "Test_1.test_process_cdrq",
  "fullName" : "test_car_source.Test_1.test_process_cdrq",
  "historyId" : "25c7573ea57e6f5e0ca8a1b3ef45c20c",
  "time" : {
    "start" : 1548313021465,
    "stop" : 1548313037976,
    "duration" : 16511
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "failed",
  "statusMessage" : "TimeoutException: Message: \n",
  "statusTrace" : "self = <test_car_source.Test_1 object at 0x000001DD94285390>\n\n    @allure.step(title=\"选择初登日期\")\n    def test_process_cdrq(self):\n>       self.obj.click_cdrq()\n\nScripts\\test_car_source.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage\\xmd_car_source.py:418: in click_cdrq\n    self.click_element(Page.cdrq)\nBase\\Base.py:44: in click_element\n    self.search_element(loc).click()\nBase\\Base.py:23: in search_element\n    return WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(*loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0d0e24f6-2427-49e6-b0d4-1f6c27788957\")>\nmethod = <function Base.search_element.<locals>.<lambda> at 0x000001DD93A2E950>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\software\\python3.6\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "TimeoutException: Message: \n",
    "statusTrace" : "self = <test_car_source.Test_1 object at 0x000001DD94285390>\n\n    @allure.step(title=\"选择初登日期\")\n    def test_process_cdrq(self):\n>       self.obj.click_cdrq()\n\nScripts\\test_car_source.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage\\xmd_car_source.py:418: in click_cdrq\n    self.click_element(Page.cdrq)\nBase\\Base.py:44: in click_element\n    self.search_element(loc).click()\nBase\\Base.py:23: in search_element\n    return WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(*loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0d0e24f6-2427-49e6-b0d4-1f6c27788957\")>\nmethod = <function Base.search_element.<locals>.<lambda> at 0x000001DD93A2E950>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\software\\python3.6\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ {
      "name" : "选择初登日期",
      "time" : {
        "start" : 1548313021468,
        "stop" : 1548313037864,
        "duration" : 16396
      },
      "status" : "failed",
      "statusMessage" : "self = <test_car_source.Test_1 object at 0x000001DD94285390>\n\n    @allure.step(title=\"选择初登日期\")\n    def test_process_cdrq(self):\n>       self.obj.click_cdrq()\n\nScripts\\test_car_source.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage\\xmd_car_source.py:418: in click_cdrq\n    self.click_element(Page.cdrq)\nBase\\Base.py:44: in click_element\n    self.search_element(loc).click()\nBase\\Base.py:23: in search_element\n    return WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(*loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0d0e24f6-2427-49e6-b0d4-1f6c27788957\")>\nmethod = <function Base.search_element.<locals>.<lambda> at 0x000001DD93A2E950>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\software\\python3.6\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "DESKTOP-08IDGDC"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "thread",
    "value" : "8700-MainThread"
  }, {
    "name" : "suite",
    "value" : "test_car_source"
  }, {
    "name" : "testClass",
    "value" : "test_car_source"
  }, {
    "name" : "testMethod",
    "value" : "Test_1.test_process_cdrq"
  }, {
    "name" : "package",
    "value" : "test_car_source"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e16bef835cd36441.json",
  "parameterValues" : [ ]
}